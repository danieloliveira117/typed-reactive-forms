{"version":3,"file":"ngneat-reactive-forms.js","sources":["ng:/@ngneat/reactive-forms/lib/utils.ts","ng:/@ngneat/reactive-forms/lib/control-actions.ts","ng:/@ngneat/reactive-forms/lib/formArray.ts","ng:/@ngneat/reactive-forms/lib/formControl.ts","ng:/@ngneat/reactive-forms/lib/localStorageManager.ts","ng:/@ngneat/reactive-forms/lib/formGroup.ts","ng:/@ngneat/reactive-forms/lib/formBuilder.ts","ng:/@ngneat/reactive-forms/lib/controlValueAccessor.ts","ng:/@ngneat/reactive-forms/lib/sessionStorageManager.ts","ng:/@ngneat/reactive-forms/ngneat-reactive-forms.ts"],"names":["NgFormArray","NgFormControl","NgFormGroup","NgFormBuilder"],"mappings":"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","sourcesContent":["import { from, isObservable, Observable, of } from 'rxjs';\n\nexport function coerceArray<T>(value: T | T[]): T[] {\n  return Array.isArray(value) ? value : [value];\n}\n\nexport function isFunction(x: any): x is Function {\n  return typeof x === 'function';\n}\n\nexport function isNil(v: any): boolean {\n  return v === null || v === undefined;\n}\n\nexport function isPromise(value: any): value is Promise<unknown> {\n  return typeof value?.then === 'function';\n}\n\nexport function wrapIntoObservable<T>(value: T | Promise<T> | Observable<T>): Observable<T> {\n  if (isObservable(value) || isPromise(value)) {\n    return from(value);\n  }\n\n  return of(value);\n}\n","import { ValidationErrors, FormArray as NgFormArray } from '@angular/forms';\nimport { defer, merge, Observable, of, Subscription } from 'rxjs';\nimport { distinctUntilChanged, map, tap, debounceTime, switchMap } from 'rxjs/operators';\nimport { FormArray } from './formArray';\nimport { FormControl } from './formControl';\nimport { FormGroup } from './formGroup';\nimport {\n  AbstractControl,\n  ControlOptions,\n  ControlState,\n  ValidatorFn,\n  ControlPath,\n  PersistOptions,\n  ControlFactoryMap\n} from './types';\nimport { coerceArray, isNil, wrapIntoObservable } from './utils';\n\nfunction getControlValue<T>(control: AbstractControl<T>): T {\n  if ((control as any).getRawValue) {\n    return (control as any).getRawValue();\n  }\n  return control.value;\n}\n\nfunction compareErrors(a: ValidationErrors | null, b: ValidationErrors | null) {\n  if (isNil(a) || isNil(b)) {\n    return a === b;\n  }\n  return JSON.stringify(a) === JSON.stringify(b);\n}\n\nexport function controlValueChanges$<T>(control: AbstractControl<T>): Observable<T> {\n  return merge(\n    defer(() => of(getControlValue(control))),\n    control.valueChanges.pipe(map(() => getControlValue(control)))\n  );\n}\n\nexport function controlDisabled$<T>(control: AbstractControl<T>): Observable<boolean> {\n  return merge(\n    defer(() => of(control.disabled)),\n    control.statusChanges.pipe(\n      map(() => control.disabled),\n      distinctUntilChanged()\n    )\n  );\n}\n\nexport function controlEnabled$<T>(control: AbstractControl<T>): Observable<boolean> {\n  return merge(\n    defer(() => of(control.enabled)),\n    control.statusChanges.pipe(\n      map(() => control.enabled),\n      distinctUntilChanged()\n    )\n  );\n}\n\nexport function controlStatusChanges$<T>(control: AbstractControl<T>): Observable<ControlState> {\n  return merge(\n    defer(() => of(control.status as ControlState)),\n    control.statusChanges.pipe(\n      map(() => control.status as ControlState),\n      distinctUntilChanged()\n    )\n  );\n}\n\nexport function controlErrorChanges$<E>(control: AbstractControl): Observable<E | null> {\n  return merge(\n    defer(() => of(control.errors as E)),\n    control.valueChanges.pipe(\n      map(() => control.errors as E),\n      distinctUntilChanged((a, b) => compareErrors(a, b))\n    )\n  );\n}\n\nexport function enableControl<T>(control: AbstractControl<T>, enabled: boolean, opts?: ControlOptions): void {\n  if (enabled) {\n    control.enable(opts);\n  } else {\n    control.disable(opts);\n  }\n}\n\nexport function disableControl<T>(control: AbstractControl<T>, disabled: boolean, opts?: ControlOptions): void {\n  enableControl(control, !disabled, opts);\n}\n\nexport function controlDisabledWhile<T>(\n  control: AbstractControl<T>,\n  observable: Observable<boolean>,\n  opts?: ControlOptions\n): Subscription {\n  return observable.subscribe(isDisabled => disableControl(control, isDisabled, opts));\n}\n\nexport function controlEnabledWhile<T>(\n  control: AbstractControl<T>,\n  observable: Observable<boolean>,\n  opts?: ControlOptions\n): Subscription {\n  return observable.subscribe(isEnabled => enableControl(control, isEnabled, opts));\n}\n\nexport function mergeControlValidators<T, Control extends AbstractControl<T>>(\n  control: Control,\n  validators: ValidatorFn<T> | ValidatorFn<T>[]\n): void {\n  control.setValidators([control.validator, ...coerceArray(validators)]);\n  control.updateValueAndValidity();\n}\n\nexport function validateControlOn<T>(control: AbstractControl<T>, validation: Observable<null | object>): Subscription {\n  return validation.subscribe(maybeError => {\n    control.setErrors(maybeError);\n  });\n}\n\nexport function hasErrorAndTouched<T>(control: AbstractControl<T>, error: string, path?: ControlPath): boolean {\n  const hasError = control.hasError(error, !path || path.length === 0 ? undefined : path);\n  return hasError && control.touched;\n}\n\nexport function hasErrorAndDirty<T>(control: AbstractControl<T>, error: string, path?: ControlPath): boolean {\n  const hasError = control.hasError(error, !path || path.length === 0 ? undefined : path);\n  return hasError && control.dirty;\n}\n\nexport function markAllDirty<T>(control: FormArray<T> | FormGroup<T>): void {\n  control.markAsDirty({ onlySelf: true });\n  (control as any)._forEachChild(control => control.markAllAsDirty());\n}\n\nexport function selectControlValue$<T, R>(\n  control: FormGroup<T> | FormArray<T> | FormControl<T>,\n  mapFn: (state: T | T[]) => R\n): Observable<R> {\n  return (control.value$ as Observable<any>).pipe(map(mapFn), distinctUntilChanged());\n}\n\nexport function persistValue$<T>(control: FormGroup<T>, key: string, options: PersistOptions<T>): Observable<T> {\n  return control.valueChanges.pipe(\n    debounceTime(options.debounceTime),\n    switchMap(value => wrapIntoObservable(options.manager.setValue(key, value)))\n  );\n}\n\nexport function handleFormArrays<T>(\n  control: AbstractControl<T>,\n  formValue: T,\n  arrControlFactory: ControlFactoryMap<T>\n) {\n  Object.keys(formValue).forEach(controlName => {\n    const value = formValue[controlName];\n    if (Array.isArray(value) && control.get(controlName) instanceof NgFormArray) {\n      if (!arrControlFactory || (arrControlFactory && !(controlName in arrControlFactory))) {\n        throw new Error(`Please provide arrControlFactory for ${controlName}`);\n      }\n      const current = control.get(controlName) as NgFormArray;\n      const fc = arrControlFactory[controlName];\n      clearFormArray(current);\n      value.forEach((v, i) => current.insert(i, fc(v)));\n    }\n  });\n}\n\nexport function clearFormArray(control: NgFormArray) {\n  while (control.length !== 0) {\n    control.removeAt(0);\n  }\n}\n","import { FormArray as NgFormArray } from '@angular/forms';\nimport { isObservable, Observable, Subject, Subscription } from 'rxjs';\nimport { distinctUntilChanged, map } from 'rxjs/operators';\nimport {\n  controlDisabled$,\n  controlDisabledWhile,\n  controlEnabled$,\n  controlEnabledWhile,\n  controlErrorChanges$,\n  controlStatusChanges$,\n  controlValueChanges$,\n  disableControl,\n  enableControl,\n  hasErrorAndDirty,\n  hasErrorAndTouched,\n  markAllDirty,\n  mergeControlValidators\n} from './control-actions';\nimport {\n  AbstractControl,\n  AsyncValidator,\n  ControlEventOptions,\n  ControlOptions,\n  ControlPath,\n  ControlState,\n  EmitEvent,\n  ExtractStrings,\n  OnlySelf,\n  Validator,\n  ValidatorOrOpts\n} from './types';\nimport { coerceArray } from './utils';\n\nexport class FormArray<T = any, E extends object = any> extends NgFormArray {\n  readonly value: T[];\n  readonly valueChanges: Observable<T[]>;\n  readonly status: ControlState;\n  readonly statusChanges: Observable<ControlState>;\n  readonly errors: E | null;\n\n  private touchChanges = new Subject<boolean>();\n  private dirtyChanges = new Subject<boolean>();\n\n  readonly touch$ = this.touchChanges.asObservable().pipe(distinctUntilChanged());\n  readonly dirty$ = this.dirtyChanges.asObservable().pipe(distinctUntilChanged());\n\n  readonly value$ = controlValueChanges$<T[]>(this);\n  readonly disabled$ = controlDisabled$(this);\n  readonly enabled$ = controlEnabled$(this);\n  readonly status$ = controlStatusChanges$(this);\n  readonly errors$ = controlErrorChanges$<E>(this);\n\n  constructor(\n    public controls: Array<AbstractControl<T>>,\n    validatorOrOpts?: ValidatorOrOpts,\n    asyncValidator?: AsyncValidator\n  ) {\n    super(controls, validatorOrOpts, asyncValidator);\n  }\n\n  select<R>(mapFn: (state: T[]) => R): Observable<R> {\n    return this.value$.pipe(map(mapFn), distinctUntilChanged());\n  }\n\n  getRawValue(): T[] {\n    return super.getRawValue();\n  }\n\n  at(index: number): AbstractControl<T> {\n    return super.at(index) as AbstractControl<T>;\n  }\n\n  setValue(valueOrObservable: Observable<T[]>, options?: ControlEventOptions): Subscription;\n  setValue(valueOrObservable: T[], options?: ControlEventOptions): void;\n  setValue(valueOrObservable: T[] | Observable<T[]>, options?: ControlEventOptions): Subscription | void {\n    if (isObservable(valueOrObservable)) {\n      return valueOrObservable.subscribe(value => super.setValue(value, options));\n    }\n\n    super.setValue(valueOrObservable, options);\n  }\n\n  patchValue(valueOrObservable: Observable<T[]>, options?: ControlEventOptions): Subscription;\n  patchValue(valueOrObservable: T[], options?: ControlEventOptions): void;\n  patchValue(valueOrObservable: any, options?: ControlEventOptions): Subscription | void {\n    if (isObservable(valueOrObservable)) {\n      return valueOrObservable.subscribe((value: T[]) => super.patchValue(value, options));\n    }\n\n    super.patchValue(valueOrObservable as T[], options);\n  }\n\n  push(control: AbstractControl<T>): void {\n    return super.push(control);\n  }\n\n  insert(index: number, control: AbstractControl<T>): void {\n    return super.insert(index, control);\n  }\n\n  setControl(index: number, control: AbstractControl<T>): void {\n    return super.setControl(index, control);\n  }\n\n  disabledWhile(observable: Observable<boolean>, options?: ControlOptions) {\n    return controlDisabledWhile(this, observable, options);\n  }\n\n  enabledWhile(observable: Observable<boolean>, options?: ControlOptions) {\n    return controlEnabledWhile(this, observable, options);\n  }\n\n  mergeValidators(validators: Validator) {\n    mergeControlValidators(this, validators);\n  }\n\n  mergeAsyncValidators(validators: AsyncValidator) {\n    this.setAsyncValidators([this.asyncValidator, ...coerceArray(validators)]);\n    this.updateValueAndValidity();\n  }\n\n  markAsTouched(opts?: OnlySelf): void {\n    super.markAsTouched(opts);\n    this.touchChanges.next(true);\n  }\n\n  markAsUntouched(opts?: OnlySelf): void {\n    super.markAsUntouched(opts);\n    this.touchChanges.next(false);\n  }\n\n  markAsPristine(opts?: OnlySelf): void {\n    super.markAsPristine(opts);\n    this.dirtyChanges.next(false);\n  }\n\n  markAsDirty(opts?: OnlySelf): void {\n    super.markAsDirty(opts);\n    this.dirtyChanges.next(true);\n  }\n\n  markAllAsDirty(): void {\n    markAllDirty(this);\n  }\n\n  reset(value?: T[], options?: ControlEventOptions): void {\n    super.reset(value, options);\n  }\n\n  setValidators(newValidator: Validator): void {\n    super.setValidators(newValidator);\n    super.updateValueAndValidity();\n  }\n\n  setAsyncValidators(newValidator: AsyncValidator): void {\n    super.setAsyncValidators(newValidator);\n    super.updateValueAndValidity();\n  }\n\n  validateOn(observableValidation: Observable<null | object>) {\n    return observableValidation.subscribe(maybeError => {\n      this.setErrors(maybeError);\n    });\n  }\n\n  hasError(errorCode: ExtractStrings<E>, path?: ControlPath) {\n    return super.hasError(errorCode, path);\n  }\n\n  setErrors(errors: Partial<E> | null, opts: EmitEvent = {}) {\n    return super.setErrors(errors, opts);\n  }\n\n  getError<K extends ExtractStrings<E>>(errorCode: K, path?: ControlPath) {\n    return super.getError(errorCode, path) as E[K] | null;\n  }\n\n  hasErrorAndTouched(errorCode: ExtractStrings<E>, path?: ControlPath): boolean {\n    return hasErrorAndTouched(this, errorCode, path);\n  }\n\n  hasErrorAndDirty(errorCode: ExtractStrings<E>, path?: ControlPath): boolean {\n    return hasErrorAndDirty(this, errorCode, path);\n  }\n\n  setEnable(enable = true, opts?: ControlEventOptions) {\n    enableControl(this, enable, opts);\n  }\n\n  setDisable(disable = true, opts?: ControlEventOptions) {\n    disableControl(this, disable, opts);\n  }\n}\n","import { FormControl as NgFormControl } from '@angular/forms';\nimport { isObservable, Observable, Subject, Subscription } from 'rxjs';\nimport { distinctUntilChanged } from 'rxjs/operators';\nimport {\n  controlDisabled$,\n  controlDisabledWhile,\n  controlEnabled$,\n  controlEnabledWhile,\n  controlErrorChanges$,\n  controlStatusChanges$,\n  controlValueChanges$,\n  disableControl,\n  enableControl,\n  hasErrorAndDirty,\n  hasErrorAndTouched,\n  mergeControlValidators,\n  validateControlOn\n} from './control-actions';\nimport {\n  AsyncValidator,\n  AsyncValidatorFn,\n  ControlEventOptions,\n  ControlOptions,\n  ControlState,\n  EmitEvent,\n  ExtractStrings,\n  OnlySelf,\n  OrBoxedValue,\n  Validator,\n  ValidatorOrOpts\n} from './types';\nimport { coerceArray } from './utils';\n\nexport class FormControl<T = any, E extends object = any> extends NgFormControl {\n  readonly value: T;\n  readonly errors: E | null;\n  readonly asyncValidator: AsyncValidatorFn<T>;\n  readonly valueChanges: Observable<T>;\n  readonly status: ControlState;\n  readonly statusChanges: Observable<ControlState>;\n\n  private touchChanges = new Subject<boolean>();\n  private dirtyChanges = new Subject<boolean>();\n\n  readonly touch$ = this.touchChanges.asObservable().pipe(distinctUntilChanged());\n  readonly dirty$ = this.dirtyChanges.asObservable().pipe(distinctUntilChanged());\n\n  readonly value$ = controlValueChanges$<T>(this);\n  readonly disabled$ = controlDisabled$<T>(this);\n  readonly enabled$ = controlEnabled$<T>(this);\n  readonly status$ = controlStatusChanges$<T>(this);\n  readonly errors$ = controlErrorChanges$<E>(this);\n\n  constructor(formState?: OrBoxedValue<T>, validatorOrOpts?: ValidatorOrOpts, asyncValidator?: AsyncValidator) {\n    super(formState, validatorOrOpts, asyncValidator);\n  }\n\n  setValue(valueOrObservable: Observable<T>, options?: ControlOptions): Subscription;\n  setValue(valueOrObservable: T, options?: ControlOptions): void;\n  setValue(valueOrObservable: any, options?: ControlOptions): Subscription | void {\n    if (isObservable(valueOrObservable)) {\n      return valueOrObservable.subscribe(value => super.setValue(value, options));\n    }\n\n    super.setValue(valueOrObservable, options);\n  }\n\n  patchValue(valueOrObservable: Observable<T>, options?: ControlOptions): Subscription;\n  patchValue(valueOrObservable: T, options?: ControlOptions): void;\n  patchValue(valueOrObservable: any, options?: ControlOptions): Subscription | void {\n    if (isObservable(valueOrObservable)) {\n      return valueOrObservable.subscribe(value => super.patchValue(value, options));\n    }\n\n    super.patchValue(valueOrObservable, options);\n  }\n\n  disabledWhile(observable: Observable<boolean>, options?: ControlOptions) {\n    return controlDisabledWhile(this, observable, options);\n  }\n\n  enabledWhile(observable: Observable<boolean>, options?: ControlOptions) {\n    return controlEnabledWhile(this, observable, options);\n  }\n\n  mergeValidators(validators: Validator) {\n    mergeControlValidators(this, validators);\n  }\n\n  mergeAsyncValidators(validators: AsyncValidator) {\n    this.setAsyncValidators([this.asyncValidator, ...coerceArray(validators)]);\n    this.updateValueAndValidity();\n  }\n\n  markAsTouched(opts?: OnlySelf): void {\n    super.markAsTouched(opts);\n    this.touchChanges.next(true);\n  }\n\n  markAsUntouched(opts?: OnlySelf): void {\n    super.markAsUntouched(opts);\n    this.touchChanges.next(false);\n  }\n\n  markAsPristine(opts?: OnlySelf): void {\n    super.markAsPristine(opts);\n    this.dirtyChanges.next(false);\n  }\n\n  markAsDirty(opts?: OnlySelf): void {\n    super.markAsDirty(opts);\n    this.dirtyChanges.next(true);\n  }\n\n  markAllAsDirty(): void {\n    this.markAsDirty({ onlySelf: true });\n  }\n\n  reset(formState?: OrBoxedValue<T>, options?: ControlEventOptions): void {\n    super.reset(formState, options);\n  }\n\n  setValidators(newValidator: Validator): void {\n    super.setValidators(newValidator);\n    super.updateValueAndValidity();\n  }\n\n  setAsyncValidators(newValidator: AsyncValidator): void {\n    super.setAsyncValidators(newValidator);\n    super.updateValueAndValidity();\n  }\n\n  validateOn(observableValidation: Observable<null | object>) {\n    return validateControlOn(this, observableValidation);\n  }\n\n  getError<K extends ExtractStrings<E>>(errorCode: K): E[K] | null {\n    return super.getError(errorCode) as E[K] | null;\n  }\n\n  hasError<K extends ExtractStrings<E>>(errorCode: K) {\n    return super.hasError(errorCode);\n  }\n\n  setErrors(errors: Partial<E> | null, opts: EmitEvent = {}) {\n    return super.setErrors(errors, opts);\n  }\n\n  hasErrorAndTouched(error: ExtractStrings<E>): boolean {\n    return hasErrorAndTouched(this, error);\n  }\n\n  hasErrorAndDirty(error: ExtractStrings<E>): boolean {\n    return hasErrorAndDirty(this, error);\n  }\n\n  setEnable(enable = true, opts?: ControlEventOptions) {\n    enableControl(this, enable, opts);\n  }\n\n  setDisable(disable = true, opts?: ControlEventOptions) {\n    disableControl(this, disable, opts);\n  }\n}\n","import { PersistManager } from './persistManager';\n\nexport class LocalStorageManager<T> implements PersistManager<T> {\n  setValue(key: string, data: T): T {\n    localStorage.setItem(key, JSON.stringify(data));\n    return data;\n  }\n\n  getValue(key: string): T {\n    return JSON.parse(localStorage.getItem(key) || '{}');\n  }\n}\n","import { FormGroup as NgFormGroup, FormArray as NgFormArray } from '@angular/forms';\nimport { isObservable, Observable, Subject, Subscription } from 'rxjs';\nimport { distinctUntilChanged, tap, take, switchMap } from 'rxjs/operators';\nimport {\n  controlDisabled$,\n  controlDisabledWhile,\n  controlEnabled$,\n  controlEnabledWhile,\n  controlErrorChanges$,\n  controlStatusChanges$,\n  controlValueChanges$,\n  disableControl,\n  enableControl,\n  hasErrorAndDirty,\n  hasErrorAndTouched,\n  markAllDirty,\n  mergeControlValidators,\n  selectControlValue$,\n  validateControlOn,\n  persistValue$,\n  handleFormArrays\n} from './control-actions';\nimport {\n  AbstractControl,\n  AsyncValidator,\n  ControlEventOptions,\n  ControlOptions,\n  ControlState,\n  EmitEvent,\n  ExtractAbstractControl,\n  ExtractStrings,\n  KeyValueControls,\n  Obj,\n  OnlySelf,\n  Validator,\n  ValidatorOrOpts,\n  PersistOptions,\n  ControlFactoryMap\n} from './types';\nimport { coerceArray, wrapIntoObservable } from './utils';\nimport { PersistManager } from './persistManager';\nimport { LocalStorageManager } from './localStorageManager';\nimport { FormArray } from './formArray';\n\nexport class FormGroup<T extends Obj = any, E extends object = any> extends NgFormGroup {\n  readonly value: T;\n  readonly errors: E | null;\n  readonly valueChanges: Observable<T>;\n  readonly status: ControlState;\n  readonly statusChanges: Observable<ControlState>;\n\n  private touchChanges = new Subject<boolean>();\n  private dirtyChanges = new Subject<boolean>();\n\n  touch$ = this.touchChanges.asObservable().pipe(distinctUntilChanged());\n  dirty$ = this.dirtyChanges.asObservable().pipe(distinctUntilChanged());\n\n  readonly value$ = controlValueChanges$<T>(this);\n  readonly disabled$ = controlDisabled$<T>(this);\n  readonly enabled$ = controlEnabled$<T>(this);\n  readonly status$ = controlStatusChanges$<T>(this);\n  readonly errors$ = controlErrorChanges$<E>(this);\n\n  constructor(\n    public controls: ExtractAbstractControl<KeyValueControls<T>, T>,\n    validatorOrOpts?: ValidatorOrOpts,\n    asyncValidator?: AsyncValidator\n  ) {\n    super(controls, validatorOrOpts, asyncValidator);\n  }\n\n  select<R>(mapFn: (state: T) => R): Observable<R> {\n    return selectControlValue$(this, mapFn);\n  }\n\n  getRawValue(): T {\n    return super.getRawValue();\n  }\n\n  get<K1 extends keyof T>(path?: [K1]): AbstractControl<T[K1]>;\n  get<K1 extends keyof T, K2 extends keyof T[K1]>(path?: [K1, K2]): AbstractControl<T[K1][K2]>;\n  get<K1 extends keyof T, K2 extends keyof T[K1], K3 extends keyof T[K1][K2]>(\n    path?: [K1, K2, K3]\n  ): AbstractControl<T[K1][K2][K3]>;\n  get(path?: string): AbstractControl;\n  get(path: any) {\n    return super.get(path);\n  }\n\n  getControl<P1 extends keyof T>(prop1: P1): AbstractControl<T[P1]>;\n  getControl<P1 extends keyof T, P2 extends keyof T[P1]>(prop1: P1, prop2: P2): AbstractControl<T[P1][P2]>;\n  getControl<P1 extends keyof T, P2 extends keyof T[P1], P3 extends keyof T[P1][P2]>(\n    prop1: P1,\n    prop2: P2,\n    prop3: P3\n  ): AbstractControl<T[P1][P2][P3]>;\n  getControl<P1 extends keyof T, P2 extends keyof T[P1], P3 extends keyof T[P1][P2], P4 extends keyof T[P1][P2][P3]>(\n    prop1: P1,\n    prop2: P2,\n    prop3: P3,\n    prop4: P4\n  ): AbstractControl<T[P1][P2][P3][P4]>;\n  getControl(...names: any): AbstractControl<any> {\n    return this.get(names.join('.'));\n  }\n\n  addControl<K extends ExtractStrings<T>>(name: K, control: AbstractControl<T[K]>): void {\n    super.addControl(name, control);\n  }\n\n  removeControl(name: ExtractStrings<T>): void {\n    super.removeControl(name);\n  }\n\n  contains(controlName: ExtractStrings<T>): boolean {\n    return super.contains(controlName);\n  }\n\n  setControl<K extends ExtractStrings<T>>(name: K, control: AbstractControl<T[K]>): void {\n    super.setControl(name, control);\n  }\n\n  setValue(valueOrObservable: Observable<T>, options?: ControlEventOptions): Subscription;\n  setValue(valueOrObservable: T, options?: ControlEventOptions): void;\n  setValue(valueOrObservable: any, options?: ControlEventOptions): any {\n    if (isObservable(valueOrObservable)) {\n      return valueOrObservable.subscribe(value => super.setValue(value, options));\n    }\n\n    super.setValue(valueOrObservable, options);\n  }\n\n  patchValue(valueOrObservable: Observable<Partial<T>>, options?: ControlEventOptions): Subscription;\n  patchValue(valueOrObservable: Partial<T>, options?: ControlEventOptions): void;\n  patchValue(valueOrObservable: any, options?: ControlEventOptions): Subscription | void {\n    if (isObservable(valueOrObservable)) {\n      return valueOrObservable.subscribe(value => super.patchValue(value, options));\n    }\n\n    super.patchValue(valueOrObservable, options);\n  }\n\n  disabledWhile(observable: Observable<boolean>, options?: ControlOptions) {\n    return controlDisabledWhile(this, observable, options);\n  }\n\n  enabledWhile(observable: Observable<boolean>, options?: ControlOptions) {\n    return controlEnabledWhile(this, observable, options);\n  }\n\n  mergeValidators(validators: Validator) {\n    mergeControlValidators(this, validators);\n  }\n\n  mergeAsyncValidators(validators: AsyncValidator) {\n    this.setAsyncValidators([this.asyncValidator, ...coerceArray(validators)]);\n    this.updateValueAndValidity();\n  }\n\n  markAsTouched(opts?: OnlySelf): void {\n    super.markAsTouched(opts);\n    this.touchChanges.next(true);\n  }\n\n  markAsUntouched(opts?: OnlySelf): void {\n    super.markAsUntouched(opts);\n    this.touchChanges.next(false);\n  }\n\n  markAsPristine(opts?: OnlySelf): void {\n    super.markAsPristine(opts);\n    this.dirtyChanges.next(false);\n  }\n\n  markAsDirty(opts?: OnlySelf): void {\n    super.markAsDirty(opts);\n    this.dirtyChanges.next(true);\n  }\n\n  markAllAsDirty(): void {\n    markAllDirty(this);\n  }\n\n  reset(formState?: Partial<T>, options?: ControlEventOptions): void {\n    super.reset(formState, options);\n  }\n\n  setValidators(newValidator: Validator): void {\n    super.setValidators(newValidator);\n    super.updateValueAndValidity();\n  }\n\n  setAsyncValidators(newValidator: AsyncValidator): void {\n    super.setAsyncValidators(newValidator);\n    super.updateValueAndValidity();\n  }\n\n  validateOn(observableValidation: Observable<null | object>) {\n    return validateControlOn(this, observableValidation);\n  }\n\n  hasError<K1 extends keyof T>(errorCode: ExtractStrings<E>, path?: [K1]): boolean;\n  hasError<K1 extends keyof T, K2 extends keyof T[K1]>(errorCode: ExtractStrings<E>, path?: [K1, K2]): boolean;\n  hasError<K1 extends keyof T, K2 extends keyof T[K1], K3 extends keyof T[K1][K2]>(\n    errorCode: ExtractStrings<E>,\n    path?: [K1, K2, K3]\n  ): boolean;\n  hasError(errorCode: ExtractStrings<E>, path?: string): boolean;\n  hasError(errorCode: ExtractStrings<E>, path?: any): boolean {\n    return super.hasError(errorCode, path);\n  }\n\n  setErrors(errors: Partial<E> | null, opts: EmitEvent = {}) {\n    return super.setErrors(errors, opts);\n  }\n\n  getError<K extends keyof E, K1 extends keyof T>(errorCode: K, path?: [K1]): E[K] | null;\n  getError<K extends keyof E, K1 extends keyof T, K2 extends keyof T[K1]>(errorCode: K, path?: [K1, K2]): E[K] | null;\n  getError<K extends keyof E, K1 extends keyof T, K2 extends keyof T[K1], K3 extends keyof T[K1][K2]>(\n    errorCode: K,\n    path?: [K1, K2, K3]\n  ): E[K] | null;\n  getError<K extends keyof E>(errorCode: K, path?: string): E[K] | null;\n  getError<K extends keyof E>(errorCode: K, path?: any): E[K] | null {\n    return super.getError(errorCode as any, path) as E[K] | null;\n  }\n\n  hasErrorAndTouched<P1 extends keyof T>(error: ExtractStrings<E>, prop1?: P1): boolean;\n  hasErrorAndTouched<P1 extends keyof T, P2 extends keyof T[P1]>(\n    error: ExtractStrings<E>,\n    prop1?: P1,\n    prop2?: P2\n  ): boolean;\n  hasErrorAndTouched<P1 extends keyof T, P2 extends keyof T[P1], P3 extends keyof T[P1][P2]>(\n    error: ExtractStrings<E>,\n    prop1?: P1,\n    prop2?: P2,\n    prop3?: P3\n  ): boolean;\n  hasErrorAndTouched<\n    P1 extends keyof T,\n    P2 extends keyof T[P1],\n    P3 extends keyof T[P1][P2],\n    P4 extends keyof T[P1][P2][P3]\n  >(error: ExtractStrings<E>, prop1?: P1, prop2?: P2, prop3?: P3, prop4?: P4): boolean;\n  hasErrorAndTouched(error: any, ...path: any): boolean {\n    return hasErrorAndTouched(this, error, ...path);\n  }\n\n  hasErrorAndDirty<P1 extends keyof T>(error: ExtractStrings<E>, prop1?: P1): boolean;\n  hasErrorAndDirty<P1 extends keyof T, P2 extends keyof T[P1]>(\n    error: ExtractStrings<E>,\n    prop1?: P1,\n    prop2?: P2\n  ): boolean;\n  hasErrorAndDirty<P1 extends keyof T, P2 extends keyof T[P1], P3 extends keyof T[P1][P2]>(\n    error: ExtractStrings<E>,\n    prop1?: P1,\n    prop2?: P2,\n    prop3?: P3\n  ): boolean;\n  hasErrorAndDirty<\n    P1 extends keyof T,\n    P2 extends keyof T[P1],\n    P3 extends keyof T[P1][P2],\n    P4 extends keyof T[P1][P2][P3]\n  >(error: ExtractStrings<E>, prop1?: P1, prop2?: P2, prop3?: P3, prop4?: P4): boolean;\n  hasErrorAndDirty(error: any, ...path: any): boolean {\n    return hasErrorAndDirty(this, error, ...path);\n  }\n\n  setEnable(enable = true, opts?: ControlEventOptions) {\n    enableControl(this, enable, opts);\n  }\n\n  setDisable(disable = true, opts?: ControlEventOptions) {\n    disableControl(this, disable, opts);\n  }\n\n  persist(key: string, { debounceTime, manager, arrControlFactory }: PersistOptions<T>): Observable<T> {\n    const persistManager = manager || new LocalStorageManager();\n    return this.restore(key, persistManager, arrControlFactory).pipe(\n      switchMap(() =>\n        persistValue$(this, key, {\n          debounceTime: debounceTime || 250,\n          manager: persistManager\n        })\n      )\n    );\n  }\n\n  private restore(key: string, manager: PersistManager<T>, arrControlFactory: ControlFactoryMap<T>): Observable<T> {\n    return wrapIntoObservable<T>(manager.getValue(key)).pipe(\n      take(1),\n      tap(value => {\n        if (!value) return;\n        handleFormArrays(this, value, arrControlFactory);\n        this.patchValue(value, { emitEvent: false });\n      })\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { FormBuilder as NgFormBuilder } from '@angular/forms';\nimport { FormArray } from './formArray';\nimport { FormControl } from './formControl';\nimport { FormGroup } from './formGroup';\nimport { AbstractControlOptions, AsyncValidatorFn, AbstractControl, OrBoxedValue, ValidatorFn } from './types';\n\nfunction isAbstractControlOptions<T>(\n  options: AbstractControlOptions<T> | { [key: string]: any }\n): options is AbstractControlOptions<T> {\n  return (\n    (<AbstractControlOptions<T>>options).asyncValidators !== undefined ||\n    (<AbstractControlOptions<T>>options).validators !== undefined ||\n    (<AbstractControlOptions<T>>options).updateOn !== undefined\n  );\n}\n\nexport type FbControlConfig<T = any> =\n  | AbstractControl<T>\n  | [OrBoxedValue<T>, ValidatorFn | ValidatorFn[] | null, AsyncValidatorFn | AsyncValidatorFn[] | null]\n  | [OrBoxedValue<T>, ValidatorFn | ValidatorFn[] | AbstractControlOptions | null]\n  | [T | OrBoxedValue<T>]\n  | OrBoxedValue<T>\n  | T;\n\nexport type FbGroupConfig<T = any> = { [key in keyof T]: FbControlConfig<T[key]> };\n\n@Injectable({ providedIn: 'root' })\nexport class FormBuilder extends NgFormBuilder {\n  group<T extends object, E extends object = any, GroupConfig extends FbGroupConfig<T> = FbGroupConfig<T>>(\n    controlsConfig: GroupConfig,\n    options?:\n      | AbstractControlOptions<T>\n      | {\n          validator?: ValidatorFn | ValidatorFn[];\n          asyncValidator?: AsyncValidatorFn | AsyncValidatorFn[];\n        }\n      | null\n  ): FormGroup<T, E> {\n    const controls = (this as any)._reduceControls(controlsConfig);\n\n    let validators: ValidatorFn | ValidatorFn[] | null = null;\n    let asyncValidators: AsyncValidatorFn | AsyncValidatorFn[] | null = null;\n    let updateOn: AbstractControlOptions<T>['updateOn'] | undefined;\n\n    if (options != null) {\n      if (isAbstractControlOptions(options)) {\n        validators = options.validators != null ? options.validators : null;\n        asyncValidators = options.asyncValidators != null ? options.asyncValidators : null;\n        updateOn = options.updateOn != null ? options.updateOn : undefined;\n      } else {\n        // `options` are legacy form group options\n        validators = options['validator'] != null ? options['validator'] : null;\n        asyncValidators = options['asyncValidator'] != null ? options['asyncValidator'] : null;\n      }\n    }\n\n    // Todo: dan remove the any\n    return new FormGroup(controls, { asyncValidators, updateOn, validators });\n  }\n\n  control<T, E extends object = any>(\n    formState: OrBoxedValue<T>,\n    validatorOrOpts?: ValidatorFn | ValidatorFn[] | AbstractControlOptions | null,\n    asyncValidator?: AsyncValidatorFn | AsyncValidatorFn[] | null\n  ): FormControl<T, E> {\n    return new FormControl(formState, validatorOrOpts, asyncValidator);\n  }\n\n  array<T, E extends object = any>(\n    controlsConfig: FbControlConfig<T>[],\n    validatorOrOpts?: ValidatorFn | ValidatorFn[] | AbstractControlOptions | null,\n    asyncValidator?: AsyncValidatorFn | AsyncValidatorFn[] | null\n  ): FormArray<T, E> {\n    const controls = controlsConfig.map(c => (this as any)._createControl(c));\n    return new FormArray(controls, validatorOrOpts, asyncValidator);\n  }\n}\n","import { ControlValueAccessor as NgControlValueAccessor } from '@angular/forms';\n\nexport abstract class ControlValueAccessor<T = any> implements NgControlValueAccessor {\n  abstract writeValue(value: T): void;\n\n  onChange? = (value: T | null) => {};\n  onTouched? = () => {};\n\n  registerOnChange(fn: (value: T | null) => void): void {\n    this.onChange = fn;\n  }\n\n  registerOnTouched(fn: () => void): void {\n    this.onTouched = fn;\n  }\n}\n","import { PersistManager } from './persistManager';\n\nexport class SessionStorageManager<T> implements PersistManager<T> {\n  setValue(key: string, data: T): T {\n    sessionStorage.setItem(key, JSON.stringify(data));\n    return data;\n  }\n\n  getValue(key: string): T {\n    return JSON.parse(sessionStorage.getItem(key) || '{}');\n  }\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n\nexport {AsyncValidator as ɵb,ExtractAbstractControl as ɵd,OrBoxedValue as ɵc,ValidatorOrOpts as ɵa} from './lib/types';"]}